package com.udea.cliente;

// Se importan los paquetes que necesita la clase
import Imagenes.PanelPrincipal;
import com.edu.rmi.IFiguras;
import java.awt.Image;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.swing.ImageIcon;

// Ventana principal para el cliente
public class VentanaPrincipal extends javax.swing.JFrame
{
    // Variable para referenciar el objeto remoto que tiene los procedimientos que calculan las caracteristicas de las figuras geometricas
    private static IFiguras clienteFiguras = null;
    
    // Constructor de la clase o ventana. Su proposito no va mas de lo estetico o para inicializacion de variables
    public VentanaPrincipal()
    {
        initComponents();
        
        // Se establece el icomo de la ventana
        Image icono = new ImageIcon(getClass().getResource("/Imagenes/icono.png")).getImage();
        setIconImage(icono);
        
        // Se define el titulo de la ventana
        setTitle("Laboratorio 3 - Arquitectura De Software");
        
        // Se pone la ventana en el centro de la pantalla cuando esta se visualice
        setLocationRelativeTo(null);
        
        // Y se agrega un fondo a esta ventana
        PanelPrincipal panelConFondo = new PanelPrincipal();
        add(panelConFondo);
        
        // Antes de terminar la construccion de esta ventana, se procede a realizar la conexion con el servidor
        if (conectarAlServidor())
        {
            // Si la conexion es exitosa se muestra un mensaje y se permite al programa continuar
            System.out.println("Conexión establecida!");
        }
        else // Si la conexion es fallida entonces
        {
            // Se imprime por consola el error y se termina el aplicativo
            System.out.println("No se pudo establecer conexion con el servidor!");
            System.exit(0);
        }
    }
    
    // Metodo para borrar o reiniciar los estados de los componentes de la ventana
    public void limpiarPantalla()
    {
        jlP1.setText("P1:");
        jlP2.setText("P2:");
        jlP3.setText("P3:");
        jtfP1.setText("");
        jtfP2.setText("");
        jtfP3.setText("");
        jtfP1.setEnabled(false);
        jtfP2.setEnabled(false);
        jtfP3.setEnabled(false);
        jtaResultado.setText("");
        jlAreaDibujo.setIcon(null);
    }
    
    // Metodo que realiza la conexion con el servidor e inicializa clienteFiguras con la direccion o referencia de donde esta el servidor
    // Si la conexion fue exitosa devuelve verdadero, de lo contrario falso
    private static boolean conectarAlServidor()
    {
        try
        {
            Registry registro = LocateRegistry.getRegistry("127.0.0.1", 1099);
            clienteFiguras = (IFiguras) registro.lookup("ServidorFiguras");
        }
        catch (Exception e)
        {
            return false;
        }
        
        return true;
    }
    
    // Metodo para desplegar en tiempo real la imagen de la figura que se trabajara y que dimensiones de esta se requieren
    private void mostrarFigura(String fig)
    {
        ImageIcon imgFigura = new ImageIcon(getClass().getResource("/Imagenes/" + fig));
        jlAreaDibujo.setIcon(imgFigura);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpFigura = new javax.swing.JPanel();
        jlOpcion = new javax.swing.JLabel();
        jlP1 = new javax.swing.JLabel();
        jlP2 = new javax.swing.JLabel();
        jlP3 = new javax.swing.JLabel();
        jcbOpcion = new javax.swing.JComboBox<>();
        jtfP1 = new javax.swing.JTextField();
        jtfP3 = new javax.swing.JTextField();
        jtfP2 = new javax.swing.JTextField();
        jbAnalizar = new javax.swing.JButton();
        jbLimpiar = new javax.swing.JButton();
        jpResultado = new javax.swing.JPanel();
        jspResultado = new javax.swing.JScrollPane();
        jtaResultado = new javax.swing.JTextArea();
        jlAreaDibujo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jpFigura.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Figura", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Comic Sans MS", 1, 24))); // NOI18N
        jpFigura.setOpaque(false);

        jlOpcion.setFont(new java.awt.Font("Comic Sans MS", 1, 20)); // NOI18N
        jlOpcion.setText("Opción:");

        jlP1.setFont(new java.awt.Font("Comic Sans MS", 1, 20)); // NOI18N
        jlP1.setText("P1:");

        jlP2.setFont(new java.awt.Font("Comic Sans MS", 1, 20)); // NOI18N
        jlP2.setText("P2:");

        jlP3.setFont(new java.awt.Font("Comic Sans MS", 1, 20)); // NOI18N
        jlP3.setText("P3:");

        jcbOpcion.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jcbOpcion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rectángulo - Área", "Rectángulo - Perímetro", "Elipse - Área", "Elipse - Perímetro", "Triangulo - Área", "Triangulo - Perímetro", "Cubo - Área", "Cubo - Volumen", "Cilindro - Área", "Cilindro - Volumen", "Pirámide - Área", "Pirámide - Volumen", "Cono - Área", "Cono - Volumen" }));
        jcbOpcion.setSelectedIndex(-1);
        jcbOpcion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbOpcionItemStateChanged(evt);
            }
        });

        jtfP1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jtfP1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfP1.setEnabled(false);

        jtfP3.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jtfP3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfP3.setEnabled(false);

        jtfP2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jtfP2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtfP2.setEnabled(false);

        jbAnalizar.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jbAnalizar.setText("Analizar");
        jbAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnalizarActionPerformed(evt);
            }
        });

        jbLimpiar.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jbLimpiar.setText("Limpiar");
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFiguraLayout = new javax.swing.GroupLayout(jpFigura);
        jpFigura.setLayout(jpFiguraLayout);
        jpFiguraLayout.setHorizontalGroup(
            jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiguraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlOpcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlP2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlP3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfP1)
                    .addComponent(jtfP2)
                    .addComponent(jtfP3)
                    .addComponent(jcbOpcion, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jpFiguraLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jbAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jpFiguraLayout.setVerticalGroup(
            jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiguraLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlOpcion)
                    .addComponent(jcbOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlP1)
                    .addComponent(jtfP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlP2)
                    .addComponent(jtfP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlP3)
                    .addComponent(jtfP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpFiguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        jpResultado.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Resultados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Comic Sans MS", 1, 24))); // NOI18N
        jpResultado.setOpaque(false);

        jtaResultado.setColumns(20);
        jtaResultado.setFont(new java.awt.Font("Comic Sans MS", 1, 20)); // NOI18N
        jtaResultado.setRows(2);
        jtaResultado.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtaResultado.setEnabled(false);
        jspResultado.setViewportView(jtaResultado);

        javax.swing.GroupLayout jpResultadoLayout = new javax.swing.GroupLayout(jpResultado);
        jpResultado.setLayout(jpResultadoLayout);
        jpResultadoLayout.setHorizontalGroup(
            jpResultadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpResultadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jspResultado)
                .addContainerGap())
        );
        jpResultadoLayout.setVerticalGroup(
            jpResultadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpResultadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jspResultado)
                .addContainerGap())
        );

        jlAreaDibujo.setBackground(new java.awt.Color(255, 255, 255));
        jlAreaDibujo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jlAreaDibujo.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpFigura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlAreaDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlAreaDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpFigura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Evento disparado cuando se cambia la figura y dimension a estudiar o se limpia la ventana
    private void jcbOpcionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbOpcionItemStateChanged
        // Aunque este metodo parece grande en realidad es muy simple, ya que lo unico que hace
        // es que de acuerdo a la operacion que se requiere, entonces se cambia las etiquetas y dibujo
        // para guiar al usuario de una forma mas intuitiva.
        switch (jcbOpcion.getSelectedIndex())
        {
            case 0:
            case 1:
                jlP1.setText("a:");
                jlP2.setText("b:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("01-02.png");
                break;
            case 2:
            case 3:
                jlP1.setText("r1:");
                jlP2.setText("r2:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("03-04.png");
                break;
            case 4:
                jlP1.setText("b:");
                jlP2.setText("h:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("05.png");
                break;
            case 5:
                jlP1.setText("a:");
                jlP2.setText("b:");
                jlP3.setText("c:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(true);
                jtaResultado.setText("");
                mostrarFigura("06.png");
                break;
            case 6:
            case 7:
                jlP1.setText("a:");
                jlP2.setText("b:");
                jlP3.setText("c:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(true);
                jtaResultado.setText("");
                mostrarFigura("07-08.png");
                break;
            case 8:
            case 9:
                jlP1.setText("r:");
                jlP2.setText("h:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("09-10.png");
                break;
            case 10:
                jlP1.setText("l:");
                jlP2.setText("ap:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("11.png");
                break;
            case 11:
                jlP1.setText("l:");
                jlP2.setText("h:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("12.png");
                break;
            case 12:
                jlP1.setText("g:");
                jlP2.setText("r:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("13.png");
                break;
            case 13:
                jlP1.setText("h:");
                jlP2.setText("r:");
                jlP3.setText("NA:");
                jtfP1.setText("");
                jtfP2.setText("");
                jtfP3.setText("---");
                jtfP1.setEnabled(true);
                jtfP2.setEnabled(true);
                jtfP3.setEnabled(false);
                jtaResultado.setText("");
                mostrarFigura("14.png");
                break;
            default:
                limpiarPantalla();
                break;
        }
    }//GEN-LAST:event_jcbOpcionItemStateChanged

    // Evento disparado cuando el usuario oprime el boton Analizar
    private void jbAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnalizarActionPerformed
        // Si todavia no se ha elegido una accion entonces
        if (jcbOpcion.getSelectedIndex() < 0)
        {
            return; // Se retorna de inmediato
        }
        
        // Si pasa aqui se crean 3 variables auxiliares cuyo proposito es recuperar y castear los valores ingresados por el usuario
        Double temp1, temp2, temp3, resul;
        
        try
        {
            // Luego, se recuperan siempre los dos primeros parametros porque todas las figuras requieren por lo menos de 2 argumentos
            temp1 = Double.parseDouble(jtfP1.getText());
            temp2 = Double.parseDouble(jtfP2.getText());
            
            // Ahora, dependiendo de la operacion seleccionada seprocede a:
            // [Opcional] Se obtiene un 3er parametro si este es necesario
            // Se hace la invocacion del metodo remoto apropiado Y se muestra el resultado en el area correspondiente
            switch (jcbOpcion.getSelectedIndex())
            {
                case 0: // Calcular el área del rectángulo, entonces...
                    resul = clienteFiguras.areaRectangulo(temp1, temp2);
                    jtaResultado.setText("El área del rectángulo es:\n" + resul);
                    break;
                case 1: // Calcular el perímetro del rectángulo, entonces...
                    resul = clienteFiguras.permitroRectangulo(temp1, temp2);
                    jtaResultado.setText("El perímetro del rectángulo es:\n" + resul);
                    break;
                case 2: // Calcular el área de la elipse, entonces...
                    resul = clienteFiguras.areaElipse(temp1, temp2);
                    jtaResultado.setText("El área de la elipse es:\n" + resul);
                    break;
                case 3: // Calcular el perímetro de la elipse, entonces...
                    resul = clienteFiguras.permitroElipse(temp1, temp2);
                    jtaResultado.setText("El perímetro de la elipse es:\n" + resul);
                    break;
                case 4: // Calcular el área del triángulo, entonces...
                    resul = clienteFiguras.areaTriangulo(temp1, temp2);
                    jtaResultado.setText("El área del triángulo es:\n" + resul);
                    break;
                case 5: // Calcular el perímetro del triángulo, entonces...
                    temp3 = Double.parseDouble(jtfP3.getText());
                    resul = clienteFiguras.permitroTriangulo(temp1, temp2, temp3);
                    jtaResultado.setText("El perímetro del triángulo es:\n" + resul);
                    break;
                case 6: // Calcular el área del cubo, entonces...
                    temp3 = Double.parseDouble(jtfP3.getText());
                    resul = clienteFiguras.areaCubo(temp1, temp2, temp3);
                    jtaResultado.setText("El área del cubo es:\n" + resul);
                    break;
                case 7: // Calcular el volumen del cubo, entonces...
                    temp3 = Double.parseDouble(jtfP3.getText());
                    resul = clienteFiguras.volumenCubo(temp1, temp2, temp3);
                    jtaResultado.setText("El volumen del cubo es:\n" + resul);
                    break;
                case 8: // Calcular el área del cilindro, entonces...
                    resul = clienteFiguras.areaCilindro(temp1, temp2);
                    jtaResultado.setText("El área del cilindro es:\n" + resul);
                    break;
                case 9: // Calcular el volumen del cilindro, entonces...
                    resul = clienteFiguras.volumenCilindro(temp1, temp2);
                    jtaResultado.setText("El volumen del cilindro es:\n" + resul);
                    break;
                case 10: // Calcular el área de la pirámide, entonces...
                    resul = clienteFiguras.areaPiramide(temp1, temp2);
                    jtaResultado.setText("El área de la pirámide es:\n" + resul);
                    break;
                case 11: // Calcular el volumen de la pirámide, entonces...
                    resul = clienteFiguras.volumenPiramide(temp1, temp2);
                    jtaResultado.setText("El volumen de la pirámide es:\n" + resul);
                    break;
                case 12: // Calcular el área del cono entonces...
                    resul = clienteFiguras.areaCono(temp1, temp2);
                    jtaResultado.setText("El área del cono es:\n" + resul);
                    break;
                case 13: // Calcular el volumen del cono, entonces...
                    resul = clienteFiguras.volumenCono(temp1, temp2);
                    jtaResultado.setText("El volumen del cono es:\n" + resul);
                    break;
            }
        }
        catch(NumberFormatException nfe) // En caso que el usuario no haya ingresado algun dato o digito un caracter indebido, se le inidca al usuario
        {
            jtaResultado.setText("Revise sus parametros de entrada!");
        }
        catch(RemoteException re) // Por otro lado, si se perdio la conexion con el servidor tambien se le informa al usuario
        {
            System.out.println("Se perdio la conexion con el servidor!");
        }
    }//GEN-LAST:event_jbAnalizarActionPerformed

    // Evento disparado cuando el usuario oprime el boton Limpiar
    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        jcbOpcion.setSelectedIndex(-1); // Para limpiar la ventana tan solo basta reiniciar el selector de opciones
    }//GEN-LAST:event_jbLimpiarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAnalizar;
    private javax.swing.JButton jbLimpiar;
    private javax.swing.JComboBox<String> jcbOpcion;
    private javax.swing.JLabel jlAreaDibujo;
    private javax.swing.JLabel jlOpcion;
    private javax.swing.JLabel jlP1;
    private javax.swing.JLabel jlP2;
    private javax.swing.JLabel jlP3;
    private javax.swing.JPanel jpFigura;
    private javax.swing.JPanel jpResultado;
    private javax.swing.JScrollPane jspResultado;
    private javax.swing.JTextArea jtaResultado;
    private javax.swing.JTextField jtfP1;
    private javax.swing.JTextField jtfP2;
    private javax.swing.JTextField jtfP3;
    // End of variables declaration//GEN-END:variables
}
